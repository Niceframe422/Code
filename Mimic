local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui", playerGui)


local guiFrame = Instance.new("Frame")
guiFrame.Size = UDim2.new(0, 300, 0, 200)
guiFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
guiFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
guiFrame.BorderSizePixel = 2
guiFrame.Parent = screenGui


local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -35, 0, 5)
minimizeButton.Text = "-"
minimizeButton.Parent = guiFrame


local slider = Instance.new("Frame")
slider.Size = UDim2.new(0, 200, 0, 20)
slider.Position = UDim2.new(0, 50, 0, 50)
slider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
slider.Parent = guiFrame


local dragHandle = Instance.new("TextButton")
dragHandle.Size = UDim2.new(0, 30, 0, 30)
dragHandle.Position = UDim2.new(0, 5, 0, 5)
dragHandle.Text = "O"
dragHandle.Parent = screenGui
dragHandle.Visible = true


local buttonContainer = Instance.new("Frame")
buttonContainer.Size = UDim2.new(0, 300, 0, 150)
buttonContainer.Position = UDim2.new(0, 0, 0, 50)
buttonContainer.BackgroundTransparency = 1
buttonContainer.Parent = guiFrame


local function createButton(parent, buttonText, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -20, 0, 30)
    button.Text = buttonText
    button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BorderSizePixel = 2
    button.Parent = parent

    local layout = parent:FindFirstChild("UIListLayout")
    if not layout then
        layout = Instance.new("UIListLayout", parent)
        layout.Padding = UDim.new(0, 5)
        layout.FillDirection = Enum.FillDirection.Vertical
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        layout.SortOrder = Enum.SortOrder.LayoutOrder
    end

    button.MouseButton1Click:Connect(callback)
    return button
end


local autoClickRunning = false
local function autoClickAction()
    autoClickRunning = not autoClickRunning
    if autoClickRunning then
        print("Auto Click started!")
        spawn(function()
            while autoClickRunning do
                local args = {
                    [1] = 0,
                    [2] = {
                        ["__args"] = {},
                        ["__tree"] = {
                            [1] = "QuickTimeService",
                            [2] = "Clicked"
                        },
                        ["__callType"] = 0
                    }
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Packet"):WaitForChild("PacketFunction"):InvokeServer(unpack(args))
                wait(1) -- Adjust interval as needed
            end
        end)
    else
        print("Auto Click stopped!")
    end
end


local buttons = {
    {
        text = "Auto Click",
        action = autoClickAction
    },
    {
        text = "Test Button",
        action = function()
            print("Test Button pressed!")
        end
    },
    {
        text = "Another Button",
        action = function()
            print("Another Button pressed!")
        end
    }
}


for _, buttonData in ipairs(buttons) do
    createButton(buttonContainer, buttonData.text, buttonData.action)
end


minimizeButton.MouseButton1Click:Connect(function()
    guiFrame.Visible = not guiFrame.Visible
end)


local dragging, dragStart, startPos

dragHandle.MouseButton1Down:Connect(function(input)
    dragging = true
    dragStart = input.Position
    startPos = guiFrame.Position

    input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
        end
    end)
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        guiFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
